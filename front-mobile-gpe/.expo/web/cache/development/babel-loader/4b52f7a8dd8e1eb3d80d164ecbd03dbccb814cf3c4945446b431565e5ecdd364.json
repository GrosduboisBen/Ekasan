{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerItem;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TouchableItem = _interopRequireDefault(require(\"./TouchableItem\"));\n\nvar _excluded = [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\", \"accessibilityState\", \"delayPressIn\"],\n    _excluded2 = [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Touchable = function Touchable(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      _onPress = _ref.onPress,\n      to = _ref.to,\n      accessibilityRole = _ref.accessibilityRole,\n      accessibilityState = _ref.accessibilityState,\n      delayPressIn = _ref.delayPressIn,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  if (_reactNative.Platform.OS === 'web' && to) {\n    return React.createElement(_native.Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        }\n      }\n    }), children);\n  } else {\n    return React.createElement(_TouchableItem.default, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      accessibilityState: accessibilityState,\n      delayPressIn: delayPressIn,\n      onPress: _onPress\n    }), React.createElement(_reactNative.View, {\n      style: style\n    }, children));\n  }\n};\n\nfunction DrawerItem(props) {\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      to = props.to,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? (0, _color.default)(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? (0, _color.default)(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      pressColor = props.pressColor,\n      pressOpacity = props.pressOpacity,\n      rest = (0, _objectWithoutProperties2.default)(props, _excluded2);\n\n  var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(_reactNative.View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(Touchable, {\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(_reactNative.View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(_reactNative.Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"mappings":"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","names":["Touchable","children","style","onPress","to","accessibilityRole","accessibilityState","delayPressIn","rest","Platform","OS","React","Link","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","TouchableItem","View","DrawerItem","props","useTheme","colors","icon","label","labelStyle","focused","activeTintColor","primary","inactiveTintColor","Color","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","StyleSheet","flatten","borderRadius","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityTraits","accessibilityComponentType","selected","accessibilityStates","Fragment","marginLeft","marginVertical","Text","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["/Users/kevin/Desktop/group-1010001/front-mobile-gpe/node_modules/@react-navigation/drawer/lib/module/views/DrawerItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Platform,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Touchable = ({\n  children,\n  style,\n  onPress,\n  to,\n  accessibilityRole,\n  accessibilityState,\n  delayPressIn,\n  ...rest\n}: TouchableWithoutFeedbackProps & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <TouchableItem\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        accessibilityState={accessibilityState}\n        delayPressIn={delayPressIn}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </TouchableItem>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <Touchable\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        // @ts-expect-error: keep for compatibility with older React Native versions\n        accessibilityStates={focused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </Touchable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}