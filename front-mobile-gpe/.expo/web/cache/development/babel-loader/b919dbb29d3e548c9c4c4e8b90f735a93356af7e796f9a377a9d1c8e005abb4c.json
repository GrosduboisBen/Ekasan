{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DownloadResumable = void 0;\nObject.defineProperty(exports, \"EncodingType\", {\n  enumerable: true,\n  get: function get() {\n    return _FileSystem.EncodingType;\n  }\n});\nexports.FileSystemCancellableNetworkTask = void 0;\nObject.defineProperty(exports, \"FileSystemSessionType\", {\n  enumerable: true,\n  get: function get() {\n    return _FileSystem.FileSystemSessionType;\n  }\n});\nObject.defineProperty(exports, \"FileSystemUploadType\", {\n  enumerable: true,\n  get: function get() {\n    return _FileSystem.FileSystemUploadType;\n  }\n});\nexports.cacheDirectory = exports.bundledAssets = exports.bundleDirectory = exports.UploadTask = exports.StorageAccessFramework = void 0;\nexports.copyAsync = copyAsync;\nexports.createDownloadResumable = createDownloadResumable;\nexports.createUploadTask = createUploadTask;\nexports.deleteAsync = deleteAsync;\nexports.deleteLegacyDocumentDirectoryAndroid = deleteLegacyDocumentDirectoryAndroid;\nexports.documentDirectory = void 0;\nexports.downloadAsync = downloadAsync;\nexports.getContentUriAsync = getContentUriAsync;\nexports.getFreeDiskStorageAsync = getFreeDiskStorageAsync;\nexports.getInfoAsync = getInfoAsync;\nexports.getTotalDiskCapacityAsync = getTotalDiskCapacityAsync;\nexports.makeDirectoryAsync = makeDirectoryAsync;\nexports.moveAsync = moveAsync;\nexports.readAsStringAsync = readAsStringAsync;\nexports.readDirectoryAsync = readDirectoryAsync;\nexports.uploadAsync = uploadAsync;\nexports.writeAsStringAsync = writeAsStringAsync;\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _uuid = require(\"uuid\");\n\nvar _ExponentFileSystem = _interopRequireDefault(require(\"./ExponentFileSystem\"));\n\nvar _FileSystem = require(\"./FileSystem.types\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nif (!_ExponentFileSystem.default) {\n  console.warn(\"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\");\n}\n\nvar _unused = new _expoModulesCore.EventEmitter(_ExponentFileSystem.default);\n\nfunction normalizeEndingSlash(p) {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n\n  return null;\n}\n\nvar documentDirectory = normalizeEndingSlash(_ExponentFileSystem.default.documentDirectory);\nexports.documentDirectory = documentDirectory;\nvar cacheDirectory = normalizeEndingSlash(_ExponentFileSystem.default.cacheDirectory);\nexports.cacheDirectory = cacheDirectory;\nvar bundledAssets = _ExponentFileSystem.default.bundledAssets,\n    bundleDirectory = _ExponentFileSystem.default.bundleDirectory;\nexports.bundleDirectory = bundleDirectory;\nexports.bundledAssets = bundledAssets;\n\nfunction getInfoAsync(_x) {\n  return _getInfoAsync.apply(this, arguments);\n}\n\nfunction _getInfoAsync() {\n  _getInfoAsync = (0, _asyncToGenerator2.default)(function* (fileUri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!_ExponentFileSystem.default.getInfoAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getInfoAsync');\n    }\n\n    return yield _ExponentFileSystem.default.getInfoAsync(fileUri, options);\n  });\n  return _getInfoAsync.apply(this, arguments);\n}\n\nfunction readAsStringAsync(_x2, _x3) {\n  return _readAsStringAsync.apply(this, arguments);\n}\n\nfunction _readAsStringAsync() {\n  _readAsStringAsync = (0, _asyncToGenerator2.default)(function* (fileUri, options) {\n    if (!_ExponentFileSystem.default.readAsStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'readAsStringAsync');\n    }\n\n    return yield _ExponentFileSystem.default.readAsStringAsync(fileUri, options || {});\n  });\n  return _readAsStringAsync.apply(this, arguments);\n}\n\nfunction getContentUriAsync(_x4) {\n  return _getContentUriAsync.apply(this, arguments);\n}\n\nfunction _getContentUriAsync() {\n  _getContentUriAsync = (0, _asyncToGenerator2.default)(function* (fileUri) {\n    if (_reactNative.Platform.OS === 'android') {\n      if (!_ExponentFileSystem.default.getContentUriAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getContentUriAsync');\n      }\n\n      return yield _ExponentFileSystem.default.getContentUriAsync(fileUri);\n    } else {\n      return new Promise(function (resolve, reject) {\n        resolve(fileUri);\n      });\n    }\n  });\n  return _getContentUriAsync.apply(this, arguments);\n}\n\nfunction writeAsStringAsync(_x5, _x6) {\n  return _writeAsStringAsync.apply(this, arguments);\n}\n\nfunction _writeAsStringAsync() {\n  _writeAsStringAsync = (0, _asyncToGenerator2.default)(function* (fileUri, contents) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!_ExponentFileSystem.default.writeAsStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n    }\n\n    return yield _ExponentFileSystem.default.writeAsStringAsync(fileUri, contents, options);\n  });\n  return _writeAsStringAsync.apply(this, arguments);\n}\n\nfunction deleteAsync(_x7) {\n  return _deleteAsync.apply(this, arguments);\n}\n\nfunction _deleteAsync() {\n  _deleteAsync = (0, _asyncToGenerator2.default)(function* (fileUri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!_ExponentFileSystem.default.deleteAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'deleteAsync');\n    }\n\n    return yield _ExponentFileSystem.default.deleteAsync(fileUri, options);\n  });\n  return _deleteAsync.apply(this, arguments);\n}\n\nfunction deleteLegacyDocumentDirectoryAndroid() {\n  return _deleteLegacyDocumentDirectoryAndroid.apply(this, arguments);\n}\n\nfunction _deleteLegacyDocumentDirectoryAndroid() {\n  _deleteLegacyDocumentDirectoryAndroid = (0, _asyncToGenerator2.default)(function* () {\n    if (_reactNative.Platform.OS !== 'android' || documentDirectory == null) {\n      return;\n    }\n\n    var legacyDocumentDirectory = documentDirectory + \"ExperienceData/\";\n    return yield deleteAsync(legacyDocumentDirectory, {\n      idempotent: true\n    });\n  });\n  return _deleteLegacyDocumentDirectoryAndroid.apply(this, arguments);\n}\n\nfunction moveAsync(_x8) {\n  return _moveAsync.apply(this, arguments);\n}\n\nfunction _moveAsync() {\n  _moveAsync = (0, _asyncToGenerator2.default)(function* (options) {\n    if (!_ExponentFileSystem.default.moveAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'moveAsync');\n    }\n\n    return yield _ExponentFileSystem.default.moveAsync(options);\n  });\n  return _moveAsync.apply(this, arguments);\n}\n\nfunction copyAsync(_x9) {\n  return _copyAsync.apply(this, arguments);\n}\n\nfunction _copyAsync() {\n  _copyAsync = (0, _asyncToGenerator2.default)(function* (options) {\n    if (!_ExponentFileSystem.default.copyAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'copyAsync');\n    }\n\n    return yield _ExponentFileSystem.default.copyAsync(options);\n  });\n  return _copyAsync.apply(this, arguments);\n}\n\nfunction makeDirectoryAsync(_x10) {\n  return _makeDirectoryAsync.apply(this, arguments);\n}\n\nfunction _makeDirectoryAsync() {\n  _makeDirectoryAsync = (0, _asyncToGenerator2.default)(function* (fileUri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!_ExponentFileSystem.default.makeDirectoryAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n    }\n\n    return yield _ExponentFileSystem.default.makeDirectoryAsync(fileUri, options);\n  });\n  return _makeDirectoryAsync.apply(this, arguments);\n}\n\nfunction readDirectoryAsync(_x11) {\n  return _readDirectoryAsync.apply(this, arguments);\n}\n\nfunction _readDirectoryAsync() {\n  _readDirectoryAsync = (0, _asyncToGenerator2.default)(function* (fileUri) {\n    if (!_ExponentFileSystem.default.readDirectoryAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n    }\n\n    return yield _ExponentFileSystem.default.readDirectoryAsync(fileUri, {});\n  });\n  return _readDirectoryAsync.apply(this, arguments);\n}\n\nfunction getFreeDiskStorageAsync() {\n  return _getFreeDiskStorageAsync.apply(this, arguments);\n}\n\nfunction _getFreeDiskStorageAsync() {\n  _getFreeDiskStorageAsync = (0, _asyncToGenerator2.default)(function* () {\n    if (!_ExponentFileSystem.default.getFreeDiskStorageAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n    }\n\n    return yield _ExponentFileSystem.default.getFreeDiskStorageAsync();\n  });\n  return _getFreeDiskStorageAsync.apply(this, arguments);\n}\n\nfunction getTotalDiskCapacityAsync() {\n  return _getTotalDiskCapacityAsync.apply(this, arguments);\n}\n\nfunction _getTotalDiskCapacityAsync() {\n  _getTotalDiskCapacityAsync = (0, _asyncToGenerator2.default)(function* () {\n    if (!_ExponentFileSystem.default.getTotalDiskCapacityAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n    }\n\n    return yield _ExponentFileSystem.default.getTotalDiskCapacityAsync();\n  });\n  return _getTotalDiskCapacityAsync.apply(this, arguments);\n}\n\nfunction downloadAsync(_x12, _x13) {\n  return _downloadAsync.apply(this, arguments);\n}\n\nfunction _downloadAsync() {\n  _downloadAsync = (0, _asyncToGenerator2.default)(function* (uri, fileUri) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!_ExponentFileSystem.default.downloadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadAsync');\n    }\n\n    return yield _ExponentFileSystem.default.downloadAsync(uri, fileUri, Object.assign({\n      sessionType: _FileSystem.FileSystemSessionType.BACKGROUND\n    }, options));\n  });\n  return _downloadAsync.apply(this, arguments);\n}\n\nfunction uploadAsync(_x14, _x15) {\n  return _uploadAsync.apply(this, arguments);\n}\n\nfunction _uploadAsync() {\n  _uploadAsync = (0, _asyncToGenerator2.default)(function* (url, fileUri) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!_ExponentFileSystem.default.uploadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'uploadAsync');\n    }\n\n    return yield _ExponentFileSystem.default.uploadAsync(url, fileUri, Object.assign({\n      sessionType: _FileSystem.FileSystemSessionType.BACKGROUND,\n      uploadType: _FileSystem.FileSystemUploadType.BINARY_CONTENT\n    }, options, {\n      httpMethod: (options.httpMethod || 'POST').toUpperCase()\n    }));\n  });\n  return _uploadAsync.apply(this, arguments);\n}\n\nfunction createDownloadResumable(uri, fileUri, options, callback, resumeData) {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\n\nfunction createUploadTask(url, fileUri, options, callback) {\n  return new UploadTask(url, fileUri, options, callback);\n}\n\nvar FileSystemCancellableNetworkTask = function () {\n  function FileSystemCancellableNetworkTask() {\n    (0, _classCallCheck2.default)(this, FileSystemCancellableNetworkTask);\n    this._uuid = (0, _uuid.v4)();\n    this.taskWasCanceled = false;\n    this.emitter = new _expoModulesCore.EventEmitter(_ExponentFileSystem.default);\n  }\n\n  (0, _createClass2.default)(FileSystemCancellableNetworkTask, [{\n    key: \"cancelAsync\",\n    value: function () {\n      var _cancelAsync = (0, _asyncToGenerator2.default)(function* () {\n        if (!_ExponentFileSystem.default.networkTaskCancelAsync) {\n          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n        }\n\n        this.removeSubscription();\n        this.taskWasCanceled = true;\n        return yield _ExponentFileSystem.default.networkTaskCancelAsync(this.uuid);\n      });\n\n      function cancelAsync() {\n        return _cancelAsync.apply(this, arguments);\n      }\n\n      return cancelAsync;\n    }()\n  }, {\n    key: \"isTaskCancelled\",\n    value: function isTaskCancelled() {\n      if (this.taskWasCanceled) {\n        console.warn('This task was already canceled.');\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"uuid\",\n    get: function get() {\n      return this._uuid;\n    }\n  }, {\n    key: \"addSubscription\",\n    value: function addSubscription() {\n      var _this = this;\n\n      if (this.subscription) {\n        return;\n      }\n\n      this.subscription = this.emitter.addListener(this.getEventName(), function (event) {\n        if (event.uuid === _this.uuid) {\n          var callback = _this.getCallback();\n\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription() {\n      if (!this.subscription) {\n        return;\n      }\n\n      this.emitter.removeSubscription(this.subscription);\n      this.subscription = null;\n    }\n  }]);\n  return FileSystemCancellableNetworkTask;\n}();\n\nexports.FileSystemCancellableNetworkTask = FileSystemCancellableNetworkTask;\n\nvar UploadTask = function (_FileSystemCancellabl) {\n  (0, _inherits2.default)(UploadTask, _FileSystemCancellabl);\n\n  var _super = _createSuper(UploadTask);\n\n  function UploadTask(url, fileUri, options, callback) {\n    var _options$httpMethod;\n\n    var _this2;\n\n    (0, _classCallCheck2.default)(this, UploadTask);\n    _this2 = _super.call(this);\n    _this2.url = url;\n    _this2.fileUri = fileUri;\n    _this2.callback = callback;\n    var httpMethod = (options == null ? void 0 : (_options$httpMethod = options.httpMethod) == null ? void 0 : _options$httpMethod.toUpperCase()) || 'POST';\n    _this2.options = Object.assign({\n      sessionType: _FileSystem.FileSystemSessionType.BACKGROUND,\n      uploadType: _FileSystem.FileSystemUploadType.BINARY_CONTENT\n    }, options, {\n      httpMethod: httpMethod\n    });\n    return _this2;\n  }\n\n  (0, _createClass2.default)(UploadTask, [{\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.uploadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"uploadAsync\",\n    value: function () {\n      var _uploadAsync2 = (0, _asyncToGenerator2.default)(function* () {\n        if (!_ExponentFileSystem.default.uploadTaskStartAsync) {\n          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n        }\n\n        if (this.isTaskCancelled()) {\n          return;\n        }\n\n        this.addSubscription();\n        var result = yield _ExponentFileSystem.default.uploadTaskStartAsync(this.url, this.fileUri, this.uuid, this.options);\n        this.removeSubscription();\n        return result;\n      });\n\n      function uploadAsync() {\n        return _uploadAsync2.apply(this, arguments);\n      }\n\n      return uploadAsync;\n    }()\n  }]);\n  return UploadTask;\n}(FileSystemCancellableNetworkTask);\n\nexports.UploadTask = UploadTask;\n\nvar DownloadResumable = function (_FileSystemCancellabl2) {\n  (0, _inherits2.default)(DownloadResumable, _FileSystemCancellabl2);\n\n  var _super2 = _createSuper(DownloadResumable);\n\n  function DownloadResumable(url, _fileUri) {\n    var _this3;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n    var resumeData = arguments.length > 4 ? arguments[4] : undefined;\n    (0, _classCallCheck2.default)(this, DownloadResumable);\n    _this3 = _super2.call(this);\n    _this3.url = url;\n    _this3._fileUri = _fileUri;\n    _this3.options = options;\n    _this3.callback = callback;\n    _this3.resumeData = resumeData;\n    return _this3;\n  }\n\n  (0, _createClass2.default)(DownloadResumable, [{\n    key: \"fileUri\",\n    get: function get() {\n      return this._fileUri;\n    }\n  }, {\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.downloadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"downloadAsync\",\n    value: function () {\n      var _downloadAsync2 = (0, _asyncToGenerator2.default)(function* () {\n        if (!_ExponentFileSystem.default.downloadResumableStartAsync) {\n          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n        }\n\n        if (this.isTaskCancelled()) {\n          return;\n        }\n\n        this.addSubscription();\n        return yield _ExponentFileSystem.default.downloadResumableStartAsync(this.url, this._fileUri, this.uuid, this.options, this.resumeData);\n      });\n\n      function downloadAsync() {\n        return _downloadAsync2.apply(this, arguments);\n      }\n\n      return downloadAsync;\n    }()\n  }, {\n    key: \"pauseAsync\",\n    value: function () {\n      var _pauseAsync = (0, _asyncToGenerator2.default)(function* () {\n        if (!_ExponentFileSystem.default.downloadResumablePauseAsync) {\n          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n        }\n\n        if (this.isTaskCancelled()) {\n          return {\n            fileUri: this._fileUri,\n            options: this.options,\n            url: this.url\n          };\n        }\n\n        var pauseResult = yield _ExponentFileSystem.default.downloadResumablePauseAsync(this.uuid);\n        this.removeSubscription();\n\n        if (pauseResult) {\n          this.resumeData = pauseResult.resumeData;\n          return this.savable();\n        } else {\n          throw new Error('Unable to generate a savable pause state');\n        }\n      });\n\n      function pauseAsync() {\n        return _pauseAsync.apply(this, arguments);\n      }\n\n      return pauseAsync;\n    }()\n  }, {\n    key: \"resumeAsync\",\n    value: function () {\n      var _resumeAsync = (0, _asyncToGenerator2.default)(function* () {\n        if (!_ExponentFileSystem.default.downloadResumableStartAsync) {\n          throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n        }\n\n        if (this.isTaskCancelled()) {\n          return;\n        }\n\n        this.addSubscription();\n        return yield _ExponentFileSystem.default.downloadResumableStartAsync(this.url, this.fileUri, this.uuid, this.options, this.resumeData);\n      });\n\n      function resumeAsync() {\n        return _resumeAsync.apply(this, arguments);\n      }\n\n      return resumeAsync;\n    }()\n  }, {\n    key: \"savable\",\n    value: function savable() {\n      return {\n        url: this.url,\n        fileUri: this.fileUri,\n        options: this.options,\n        resumeData: this.resumeData\n      };\n    }\n  }]);\n  return DownloadResumable;\n}(FileSystemCancellableNetworkTask);\n\nexports.DownloadResumable = DownloadResumable;\nvar baseReadAsStringAsync = readAsStringAsync;\nvar baseWriteAsStringAsync = writeAsStringAsync;\nvar baseDeleteAsync = deleteAsync;\nvar baseMoveAsync = moveAsync;\nvar baseCopyAsync = copyAsync;\nvar StorageAccessFramework;\nexports.StorageAccessFramework = StorageAccessFramework;\n\n(function (StorageAccessFramework) {\n  function getUriForDirectoryInRoot(folderName) {\n    return \"content://com.android.externalstorage.documents/tree/primary:\" + folderName + \"/document/primary:\" + folderName;\n  }\n\n  StorageAccessFramework.getUriForDirectoryInRoot = getUriForDirectoryInRoot;\n\n  function requestDirectoryPermissionsAsync() {\n    return _requestDirectoryPermissionsAsync.apply(this, arguments);\n  }\n\n  function _requestDirectoryPermissionsAsync() {\n    _requestDirectoryPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {\n      var initialFileUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (!_ExponentFileSystem.default.requestDirectoryPermissionsAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.requestDirectoryPermissionsAsync');\n      }\n\n      return yield _ExponentFileSystem.default.requestDirectoryPermissionsAsync(initialFileUrl);\n    });\n    return _requestDirectoryPermissionsAsync.apply(this, arguments);\n  }\n\n  StorageAccessFramework.requestDirectoryPermissionsAsync = requestDirectoryPermissionsAsync;\n\n  function readDirectoryAsync(_x16) {\n    return _readDirectoryAsync2.apply(this, arguments);\n  }\n\n  function _readDirectoryAsync2() {\n    _readDirectoryAsync2 = (0, _asyncToGenerator2.default)(function* (dirUri) {\n      if (!_ExponentFileSystem.default.readSAFDirectoryAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.readDirectoryAsync');\n      }\n\n      return yield _ExponentFileSystem.default.readSAFDirectoryAsync(dirUri, {});\n    });\n    return _readDirectoryAsync2.apply(this, arguments);\n  }\n\n  StorageAccessFramework.readDirectoryAsync = readDirectoryAsync;\n\n  function makeDirectoryAsync(_x17, _x18) {\n    return _makeDirectoryAsync2.apply(this, arguments);\n  }\n\n  function _makeDirectoryAsync2() {\n    _makeDirectoryAsync2 = (0, _asyncToGenerator2.default)(function* (parentUri, dirName) {\n      if (!_ExponentFileSystem.default.makeSAFDirectoryAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.makeDirectoryAsync');\n      }\n\n      return yield _ExponentFileSystem.default.makeSAFDirectoryAsync(parentUri, dirName);\n    });\n    return _makeDirectoryAsync2.apply(this, arguments);\n  }\n\n  StorageAccessFramework.makeDirectoryAsync = makeDirectoryAsync;\n\n  function createFileAsync(_x19, _x20, _x21) {\n    return _createFileAsync.apply(this, arguments);\n  }\n\n  function _createFileAsync() {\n    _createFileAsync = (0, _asyncToGenerator2.default)(function* (parentUri, fileName, mimeType) {\n      if (!_ExponentFileSystem.default.createSAFFileAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n      }\n\n      return yield _ExponentFileSystem.default.createSAFFileAsync(parentUri, fileName, mimeType);\n    });\n    return _createFileAsync.apply(this, arguments);\n  }\n\n  StorageAccessFramework.createFileAsync = createFileAsync;\n  StorageAccessFramework.writeAsStringAsync = baseWriteAsStringAsync;\n  StorageAccessFramework.readAsStringAsync = baseReadAsStringAsync;\n  StorageAccessFramework.deleteAsync = baseDeleteAsync;\n  StorageAccessFramework.moveAsync = baseMoveAsync;\n  StorageAccessFramework.copyAsync = baseCopyAsync;\n})(StorageAccessFramework || (exports.StorageAccessFramework = StorageAccessFramework = {}));","map":{"version":3,"mappings":"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","names":["ExponentFileSystem","console","warn","_unused","EventEmitter","normalizeEndingSlash","p","replace","documentDirectory","cacheDirectory","bundledAssets","bundleDirectory","getInfoAsync","fileUri","options","UnavailabilityError","readAsStringAsync","getContentUriAsync","Platform","OS","Promise","resolve","reject","writeAsStringAsync","contents","deleteAsync","deleteLegacyDocumentDirectoryAndroid","legacyDocumentDirectory","idempotent","moveAsync","copyAsync","makeDirectoryAsync","readDirectoryAsync","getFreeDiskStorageAsync","getTotalDiskCapacityAsync","downloadAsync","uri","sessionType","FileSystemSessionType","BACKGROUND","uploadAsync","url","uploadType","FileSystemUploadType","BINARY_CONTENT","httpMethod","toUpperCase","createDownloadResumable","callback","resumeData","DownloadResumable","createUploadTask","UploadTask","FileSystemCancellableNetworkTask","_uuid","taskWasCanceled","emitter","networkTaskCancelAsync","removeSubscription","uuid","subscription","addListener","getEventName","event","getCallback","data","uploadTaskStartAsync","isTaskCancelled","addSubscription","result","_fileUri","downloadResumableStartAsync","downloadResumablePauseAsync","pauseResult","savable","Error","baseReadAsStringAsync","baseWriteAsStringAsync","baseDeleteAsync","baseMoveAsync","baseCopyAsync","StorageAccessFramework","getUriForDirectoryInRoot","folderName","requestDirectoryPermissionsAsync","initialFileUrl","dirUri","readSAFDirectoryAsync","parentUri","dirName","makeSAFDirectoryAsync","createFileAsync","fileName","mimeType","createSAFFileAsync"],"sources":["/Users/kevin/Desktop/group-1010001/front-mobile-gpe/node_modules/expo-file-system/src/FileSystem.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExponentFileSystem from './ExponentFileSystem';\nimport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  FileSystemNetworkTaskProgressCallback,\n  DownloadProgressData,\n  UploadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n} from './FileSystem.types';\n\nif (!ExponentFileSystem) {\n  console.warn(\n    \"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\"\n  );\n}\n// Prevent webpack from pruning this.\nconst _unused = new EventEmitter(ExponentFileSystem); // eslint-disable-line\n\nexport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  FileSystemNetworkTaskProgressCallback,\n  ReadingOptions,\n  WritingOptions,\n};\n\nfunction normalizeEndingSlash(p: string | null): string | null {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\n\nexport const documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport const cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\n\nexport const { bundledAssets, bundleDirectory } = ExponentFileSystem;\n\nexport async function getInfoAsync(\n  fileUri: string,\n  options: { md5?: boolean; size?: boolean } = {}\n): Promise<FileInfo> {\n  if (!ExponentFileSystem.getInfoAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n  }\n  return await ExponentFileSystem.getInfoAsync(fileUri, options);\n}\n\nexport async function readAsStringAsync(\n  fileUri: string,\n  options?: ReadingOptions\n): Promise<string> {\n  if (!ExponentFileSystem.readAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n  }\n  return await ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n}\n\nexport async function getContentUriAsync(fileUri: string): Promise<string> {\n  if (Platform.OS === 'android') {\n    if (!ExponentFileSystem.getContentUriAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n    }\n    return await ExponentFileSystem.getContentUriAsync(fileUri);\n  } else {\n    return new Promise(function (resolve, reject) {\n      resolve(fileUri);\n    });\n  }\n}\n\nexport async function writeAsStringAsync(\n  fileUri: string,\n  contents: string,\n  options: WritingOptions = {}\n): Promise<void> {\n  if (!ExponentFileSystem.writeAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n  }\n  return await ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n}\n\nexport async function deleteAsync(\n  fileUri: string,\n  options: { idempotent?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.deleteAsync) {\n    throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n  }\n  return await ExponentFileSystem.deleteAsync(fileUri, options);\n}\n\nexport async function deleteLegacyDocumentDirectoryAndroid(): Promise<void> {\n  if (Platform.OS !== 'android' || documentDirectory == null) {\n    return;\n  }\n  const legacyDocumentDirectory = `${documentDirectory}ExperienceData/`;\n  return await deleteAsync(legacyDocumentDirectory, { idempotent: true });\n}\n\nexport async function moveAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.moveAsync) {\n    throw new UnavailabilityError('expo-file-system', 'moveAsync');\n  }\n  return await ExponentFileSystem.moveAsync(options);\n}\n\nexport async function copyAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.copyAsync) {\n    throw new UnavailabilityError('expo-file-system', 'copyAsync');\n  }\n  return await ExponentFileSystem.copyAsync(options);\n}\n\nexport async function makeDirectoryAsync(\n  fileUri: string,\n  options: { intermediates?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.makeDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n  }\n  return await ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n}\n\nexport async function readDirectoryAsync(fileUri: string): Promise<string[]> {\n  if (!ExponentFileSystem.readDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n  }\n  return await ExponentFileSystem.readDirectoryAsync(fileUri, {});\n}\n\nexport async function getFreeDiskStorageAsync(): Promise<number> {\n  if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n  }\n  return await ExponentFileSystem.getFreeDiskStorageAsync();\n}\n\nexport async function getTotalDiskCapacityAsync(): Promise<number> {\n  if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n  }\n  return await ExponentFileSystem.getTotalDiskCapacityAsync();\n}\n\nexport async function downloadAsync(\n  uri: string,\n  fileUri: string,\n  options: DownloadOptions = {}\n): Promise<FileSystemDownloadResult> {\n  if (!ExponentFileSystem.downloadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n  }\n\n  return await ExponentFileSystem.downloadAsync(uri, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    ...options,\n  });\n}\n\nexport async function uploadAsync(\n  url: string,\n  fileUri: string,\n  options: FileSystemUploadOptions = {}\n): Promise<FileSystemUploadResult> {\n  if (!ExponentFileSystem.uploadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n  }\n\n  return await ExponentFileSystem.uploadAsync(url, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    uploadType: FileSystemUploadType.BINARY_CONTENT,\n    ...options,\n    httpMethod: (options.httpMethod || 'POST').toUpperCase(),\n  });\n}\n\nexport function createDownloadResumable(\n  uri: string,\n  fileUri: string,\n  options?: DownloadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n  resumeData?: string\n): DownloadResumable {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\n\nexport function createUploadTask(\n  url: string,\n  fileUri: string,\n  options?: FileSystemUploadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n): UploadTask {\n  return new UploadTask(url, fileUri, options, callback);\n}\n\nexport abstract class FileSystemCancellableNetworkTask<\n  T extends DownloadProgressData | UploadProgressData\n> {\n  private _uuid = uuidv4();\n  protected taskWasCanceled = false;\n  private emitter = new EventEmitter(ExponentFileSystem);\n  private subscription?: Subscription | null;\n\n  public async cancelAsync(): Promise<void> {\n    if (!ExponentFileSystem.networkTaskCancelAsync) {\n      throw new UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n    }\n\n    this.removeSubscription();\n    this.taskWasCanceled = true;\n    return await ExponentFileSystem.networkTaskCancelAsync(this.uuid);\n  }\n\n  protected isTaskCancelled(): boolean {\n    if (this.taskWasCanceled) {\n      console.warn('This task was already canceled.');\n      return true;\n    }\n\n    return false;\n  }\n\n  protected get uuid(): string {\n    return this._uuid;\n  }\n\n  protected abstract getEventName(): string;\n\n  protected abstract getCallback(): FileSystemNetworkTaskProgressCallback<T> | undefined;\n\n  protected addSubscription() {\n    if (this.subscription) {\n      return;\n    }\n\n    this.subscription = this.emitter.addListener(this.getEventName(), (event: ProgressEvent<T>) => {\n      if (event.uuid === this.uuid) {\n        const callback = this.getCallback();\n        if (callback) {\n          callback(event.data);\n        }\n      }\n    });\n  }\n\n  protected removeSubscription() {\n    if (!this.subscription) {\n      return;\n    }\n    this.emitter.removeSubscription(this.subscription);\n    this.subscription = null;\n  }\n}\n\nexport class UploadTask extends FileSystemCancellableNetworkTask<UploadProgressData> {\n  private options: FileSystemUploadOptions;\n\n  constructor(\n    private url: string,\n    private fileUri: string,\n    options?: FileSystemUploadOptions,\n    private callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n  ) {\n    super();\n\n    const httpMethod = (options?.httpMethod?.toUpperCase() ||\n      'POST') as FileSystemAcceptedUploadHttpMethod;\n\n    this.options = {\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT,\n      ...options,\n      httpMethod,\n    };\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.uploadProgress';\n  }\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<UploadProgressData> | undefined {\n    return this.callback;\n  }\n\n  public async uploadAsync(): Promise<FileSystemUploadResult | undefined> {\n    if (!ExponentFileSystem.uploadTaskStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    const result = await ExponentFileSystem.uploadTaskStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options\n    );\n    this.removeSubscription();\n\n    return result;\n  }\n}\n\nexport class DownloadResumable extends FileSystemCancellableNetworkTask<DownloadProgressData> {\n  constructor(\n    private url: string,\n    private _fileUri: string,\n    private options: DownloadOptions = {},\n    private callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n    private resumeData?: string\n  ) {\n    super();\n  }\n\n  public get fileUri(): string {\n    return this._fileUri;\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.downloadProgress';\n  }\n\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<DownloadProgressData> | undefined {\n    return this.callback;\n  }\n\n  async downloadAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this._fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  async pauseAsync(): Promise<DownloadPauseState> {\n    if (!ExponentFileSystem.downloadResumablePauseAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return {\n        fileUri: this._fileUri,\n        options: this.options,\n        url: this.url,\n      };\n    }\n\n    const pauseResult = await ExponentFileSystem.downloadResumablePauseAsync(this.uuid);\n    this.removeSubscription();\n    if (pauseResult) {\n      this.resumeData = pauseResult.resumeData;\n      return this.savable();\n    } else {\n      throw new Error('Unable to generate a savable pause state');\n    }\n  }\n\n  async resumeAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  savable(): DownloadPauseState {\n    return {\n      url: this.url,\n      fileUri: this.fileUri,\n      options: this.options,\n      resumeData: this.resumeData,\n    };\n  }\n}\n\nconst baseReadAsStringAsync = readAsStringAsync;\nconst baseWriteAsStringAsync = writeAsStringAsync;\nconst baseDeleteAsync = deleteAsync;\nconst baseMoveAsync = moveAsync;\nconst baseCopyAsync = copyAsync;\n/**\n * Android only\n */\nexport namespace StorageAccessFramework {\n  export function getUriForDirectoryInRoot(folderName: string) {\n    return `content://com.android.externalstorage.documents/tree/primary:${folderName}/document/primary:${folderName}`;\n  }\n\n  export async function requestDirectoryPermissionsAsync(\n    initialFileUrl: string | null = null\n  ): Promise<FileSystemRequestDirectoryPermissionsResult> {\n    if (!ExponentFileSystem.requestDirectoryPermissionsAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.requestDirectoryPermissionsAsync'\n      );\n    }\n\n    return await ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl);\n  }\n\n  export async function readDirectoryAsync(dirUri: string): Promise<string[]> {\n    if (!ExponentFileSystem.readSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.readDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.readSAFDirectoryAsync(dirUri, {});\n  }\n\n  export async function makeDirectoryAsync(parentUri: string, dirName: string): Promise<string> {\n    if (!ExponentFileSystem.makeSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.makeDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName);\n  }\n\n  export async function createFileAsync(\n    parentUri: string,\n    fileName: string,\n    mimeType: string\n  ): Promise<string> {\n    if (!ExponentFileSystem.createSAFFileAsync) {\n      throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n    }\n    return await ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType);\n  }\n\n  export const writeAsStringAsync = baseWriteAsStringAsync;\n  export const readAsStringAsync = baseReadAsStringAsync;\n  export const deleteAsync = baseDeleteAsync;\n  export const moveAsync = baseMoveAsync;\n  export const copyAsync = baseCopyAsync;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}