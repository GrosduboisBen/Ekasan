{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _expoModulesCore = require(\"expo-modules-core\");\n\nvar _uuid = require(\"uuid\");\n\nvar _default = {\n  get name() {\n    return 'ExpoDocumentPicker';\n  },\n\n  getDocumentAsync: function () {\n    var _getDocumentAsync = (0, _asyncToGenerator2.default)(function* (_ref) {\n      var _ref$type = _ref.type,\n          type = _ref$type === void 0 ? '*/*' : _ref$type,\n          _ref$multiple = _ref.multiple,\n          multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n\n      if (!_expoModulesCore.Platform.isDOMAvailable) {\n        return {\n          type: 'cancel'\n        };\n      }\n\n      var input = document.createElement('input');\n      input.style.display = 'none';\n      input.setAttribute('type', 'file');\n      input.setAttribute('accept', Array.isArray(type) ? type.join(',') : type);\n      input.setAttribute('id', (0, _uuid.v4)());\n\n      if (multiple) {\n        input.setAttribute('multiple', 'multiple');\n      }\n\n      document.body.appendChild(input);\n      return new Promise(function (resolve, reject) {\n        input.addEventListener('change', function () {\n          if (input.files) {\n            var targetFile = input.files[0];\n            var mimeType = targetFile.type;\n            var reader = new FileReader();\n\n            reader.onerror = function () {\n              reject(new Error(\"Failed to read the selected media because the operation failed.\"));\n            };\n\n            reader.onload = function (_ref2) {\n              var target = _ref2.target;\n              var uri = target.result;\n              resolve({\n                type: 'success',\n                uri: uri,\n                mimeType: mimeType,\n                name: targetFile.name,\n                file: targetFile,\n                lastModified: targetFile.lastModified,\n                size: targetFile.size,\n                output: input.files\n              });\n            };\n\n            reader.readAsDataURL(targetFile);\n          } else {\n            resolve({\n              type: 'cancel'\n            });\n          }\n\n          document.body.removeChild(input);\n        });\n        var event = new MouseEvent('click');\n        input.dispatchEvent(event);\n      });\n    });\n\n    function getDocumentAsync(_x) {\n      return _getDocumentAsync.apply(this, arguments);\n    }\n\n    return getDocumentAsync;\n  }()\n};\nexports.default = _default;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AACA;;eAIe;EACb,IAAIA,IAAJ,GAAQ;IACN,OAAO,oBAAP;EACD,CAHY;;EAKPC,gBALO;IAAA,yEAQW;MAAA,qBAFtBC,IAEsB;MAAA,IAFtBA,IAEsB,0BAFf,KAEe;MAAA,yBADtBC,QACsB;MAAA,IADtBA,QACsB,8BADX,KACW;;MAEtB,IAAI,CAACC,0BAASC,cAAd,EAA8B;QAC5B,OAAO;UAAEH,IAAI,EAAE;QAAR,CAAP;MACD;;MAED,IAAMI,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;MACAF,KAAK,CAACG,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;MACAJ,KAAK,CAACK,YAAN,CAAmB,MAAnB,EAA2B,MAA3B;MACAL,KAAK,CAACK,YAAN,CAAmB,QAAnB,EAA6BC,KAAK,CAACC,OAAN,CAAcX,IAAd,IAAsBA,IAAI,CAACY,IAAL,CAAU,GAAV,CAAtB,GAAuCZ,IAApE;MACAI,KAAK,CAACK,YAAN,CAAmB,IAAnB,EAAyB,eAAzB;;MACA,IAAIR,QAAJ,EAAc;QACZG,KAAK,CAACK,YAAN,CAAmB,UAAnB,EAA+B,UAA/B;MACD;;MAEDJ,QAAQ,CAACQ,IAAT,CAAcC,WAAd,CAA0BV,KAA1B;MAEA,OAAO,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;QACrCb,KAAK,CAACc,gBAAN,CAAuB,QAAvB,EAAiC,YAAK;UACpC,IAAId,KAAK,CAACe,KAAV,EAAiB;YACf,IAAMC,UAAU,GAAGhB,KAAK,CAACe,KAAN,CAAY,CAAZ,CAAnB;YACA,IAAME,QAAQ,GAAGD,UAAU,CAACpB,IAA5B;YACA,IAAMsB,MAAM,GAAG,IAAIC,UAAJ,EAAf;;YACAD,MAAM,CAACE,OAAP,GAAiB,YAAK;cACpBP,MAAM,CAAC,IAAIQ,KAAJ,mEAAD,CAAN;YACD,CAFD;;YAGAH,MAAM,CAACI,MAAP,GAAgB,iBAAe;cAAA,IAAZC,MAAY,SAAZA,MAAY;cAC7B,IAAMC,GAAG,GAAID,MAAc,CAACE,MAA5B;cACAb,OAAO,CAAC;gBACNhB,IAAI,EAAE,SADA;gBAEN4B,GAAG,EAAHA,GAFM;gBAGNP,QAAQ,EAARA,QAHM;gBAINvB,IAAI,EAAEsB,UAAU,CAACtB,IAJX;gBAKNgC,IAAI,EAAEV,UALA;gBAMNW,YAAY,EAAEX,UAAU,CAACW,YANnB;gBAONC,IAAI,EAAEZ,UAAU,CAACY,IAPX;gBAQNC,MAAM,EAAE7B,KAAK,CAACe;cARR,CAAD,CAAP;YAUD,CAZD;;YAcAG,MAAM,CAACY,aAAP,CAAqBd,UAArB;UACD,CAtBD,MAsBO;YACLJ,OAAO,CAAC;cAAEhB,IAAI,EAAE;YAAR,CAAD,CAAP;UACD;;UAEDK,QAAQ,CAACQ,IAAT,CAAcsB,WAAd,CAA0B/B,KAA1B;QACD,CA5BD;QA8BA,IAAMgC,KAAK,GAAG,IAAIC,UAAJ,CAAe,OAAf,CAAd;QACAjC,KAAK,CAACkC,aAAN,CAAoBF,KAApB;MACD,CAjCM,CAAP;IAkCD,CA3DY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,C","names":["name","getDocumentAsync","type","multiple","Platform","isDOMAvailable","input","document","createElement","style","display","setAttribute","Array","isArray","join","body","appendChild","Promise","resolve","reject","addEventListener","files","targetFile","mimeType","reader","FileReader","onerror","Error","onload","target","uri","result","file","lastModified","size","output","readAsDataURL","removeChild","event","MouseEvent","dispatchEvent"],"sources":["/Users/kevin/Desktop/group-1010001/front-mobile-gpe/node_modules/expo-document-picker/src/ExpoDocumentPicker.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DocumentPickerOptions, DocumentResult } from './types';\n\nexport default {\n  get name(): string {\n    return 'ExpoDocumentPicker';\n  },\n\n  async getDocumentAsync({\n    type = '*/*',\n    multiple = false,\n  }: DocumentPickerOptions): Promise<DocumentResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { type: 'cancel' };\n    }\n\n    const input = document.createElement('input');\n    input.style.display = 'none';\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', Array.isArray(type) ? type.join(',') : type);\n    input.setAttribute('id', uuidv4());\n    if (multiple) {\n      input.setAttribute('multiple', 'multiple');\n    }\n\n    document.body.appendChild(input);\n\n    return new Promise((resolve, reject) => {\n      input.addEventListener('change', () => {\n        if (input.files) {\n          const targetFile = input.files[0];\n          const mimeType = targetFile.type;\n          const reader = new FileReader();\n          reader.onerror = () => {\n            reject(new Error(`Failed to read the selected media because the operation failed.`));\n          };\n          reader.onload = ({ target }) => {\n            const uri = (target as any).result;\n            resolve({\n              type: 'success',\n              uri,\n              mimeType,\n              name: targetFile.name,\n              file: targetFile,\n              lastModified: targetFile.lastModified,\n              size: targetFile.size,\n              output: input.files,\n            });\n          };\n          // Read in the image file as a binary string.\n          reader.readAsDataURL(targetFile);\n        } else {\n          resolve({ type: 'cancel' });\n        }\n\n        document.body.removeChild(input);\n      });\n\n      const event = new MouseEvent('click');\n      input.dispatchEvent(event);\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}