{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerView;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeScreens = require(\"react-native-screens\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _GestureHandler = require(\"./GestureHandler\");\n\nvar _SafeAreaProviderCompat = _interopRequireDefault(require(\"./SafeAreaProviderCompat\"));\n\nvar _ResourceSavingScene = _interopRequireDefault(require(\"./ResourceSavingScene\"));\n\nvar _Header = _interopRequireDefault(require(\"./Header\"));\n\nvar _DrawerContent = _interopRequireDefault(require(\"./DrawerContent\"));\n\nvar _Drawer = _interopRequireDefault(require(\"./Drawer\"));\n\nvar _DrawerOpenContext = _interopRequireDefault(require(\"../utils/DrawerOpenContext\"));\n\nvar _DrawerPositionContext = _interopRequireDefault(require(\"../utils/DrawerPositionContext\"));\n\nvar _useWindowDimensions = _interopRequireDefault(require(\"../utils/useWindowDimensions\"));\n\nvar _getIsDrawerOpenFromState = _interopRequireDefault(require(\"../utils/getIsDrawerOpenFromState\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView !== null && _GestureHandler.GestureHandlerRootView !== void 0 ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\n\nfunction DrawerView(_ref2) {\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      _ref2$lazy = _ref2.lazy,\n      lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(_DrawerContent.default, props);\n  } : _ref2$drawerContent,\n      _ref2$drawerPosition = _ref2.drawerPosition,\n      drawerPosition = _ref2$drawerPosition === void 0 ? _reactNative.I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n      _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n      keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n      _ref2$overlayColor = _ref2.overlayColor,\n      overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n      _ref2$drawerType = _ref2.drawerType,\n      drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n      _ref2$hideStatusBar = _ref2.hideStatusBar,\n      hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n      _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n      statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n      drawerContentOptions = _ref2.drawerContentOptions,\n      drawerStyle = _ref2.drawerStyle,\n      edgeWidth = _ref2.edgeWidth,\n      gestureHandlerProps = _ref2.gestureHandlerProps,\n      minSwipeDistance = _ref2.minSwipeDistance,\n      sceneContainerStyle = _ref2.sceneContainerStyle,\n      _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n\n  var _React$useState = React.useState([state.routes[state.index].key]),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  var dimensions = (0, _useWindowDimensions.default)();\n\n  var _useTheme = (0, _native.useTheme)(),\n      colors = _useTheme.colors;\n\n  var isDrawerOpen = (0, _getIsDrawerOpenFromState.default)(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(Object.assign({}, _native.DrawerActions.openDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(Object.assign({}, _native.DrawerActions.closeDrawer(), {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n\n    var handleClose = function handleClose() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      handleDrawerClose();\n      return true;\n    };\n\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    var subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', handleClose);\n\n    if (_reactNative.Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n\n    return function () {\n      subscription.remove();\n\n      if (_reactNative.Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n  var focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat((0, _toConsumableArray2.default)(loaded), [focusedRouteKey]));\n  }\n\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(_DrawerPositionContext.default.Provider, {\n      value: drawerPosition\n    }, drawerContent(Object.assign({}, drawerContentOptions, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n\n  var renderContent = function renderContent() {\n    var isScreensEnabled = (_reactNativeScreens.screensEnabled === null || _reactNativeScreens.screensEnabled === void 0 ? void 0 : (0, _reactNativeScreens.screensEnabled)()) && detachInactiveScreens;\n    return React.createElement(_reactNativeScreens.ScreenContainer, {\n      enabled: isScreensEnabled,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n\n      var _descriptor$options = descriptor.options,\n          _descriptor$options$h = _descriptor$options.header,\n          header = _descriptor$options$h === void 0 ? function (props) {\n        return React.createElement(_Header.default, props);\n      } : _descriptor$options$h,\n          _descriptor$options$h2 = _descriptor$options.headerShown,\n          headerShown = _descriptor$options$h2 === void 0 ? false : _descriptor$options$h2;\n      return React.createElement(_ResourceSavingScene.default, {\n        key: route.key,\n        style: [_reactNative.StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        enabled: isScreensEnabled\n      }, headerShown ? React.createElement(_native.NavigationContext.Provider, {\n        value: descriptor.navigation\n      }, React.createElement(_native.NavigationRouteContext.Provider, {\n        value: route\n      }, header({\n        layout: dimensions,\n        scene: {\n          route: route,\n          descriptor: descriptor\n        }\n      }))) : null, descriptor.render());\n    }));\n  };\n\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n      gestureEnabled = _descriptors$activeKe.gestureEnabled,\n      swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(_native.NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(_SafeAreaProviderCompat.default, null, React.createElement(_DrawerOpenContext.default.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(_Drawer.default, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: _reactNative.StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: _reactNative.StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions\n  })))));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","View","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","React","DrawerContent","drawerPosition","I18nManager","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","detachInactiveScreens","useState","routes","index","key","loaded","setLoaded","dimensions","useWindowDimensions","useTheme","colors","isDrawerOpen","getIsDrawerOpenFromState","handleDrawerOpen","useCallback","dispatch","DrawerActions","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleClose","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","focusedRouteKey","includes","renderNavigationView","progress","DrawerPositionContext","Provider","value","renderContent","isScreensEnabled","screensEnabled","ScreenContainer","enabled","style","styles","content","map","route","descriptor","unmountOnBlur","options","header","Header","headerShown","ResourceSavingScene","StyleSheet","absoluteFill","opacity","isVisible","NavigationContext","NavigationRouteContext","layout","scene","render","activeKey","gestureEnabled","swipeEnabled","NavigationHelpersContext","SafeAreaProviderCompat","DrawerOpenContext","Drawer","open","onOpen","onClose","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","swipeEdgeWidth","swipeDistanceThreshold","renderDrawerContent","renderSceneContent","create","flex"],"sources":["/Users/kevin/Desktop/group-1010001/front-mobile-gpe/node_modules/@react-navigation/drawer/lib/module/views/DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n} from 'react-native';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleClose = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      handleDrawerClose();\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleClose\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={isScreensEnabled} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={isScreensEnabled}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}