{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAssets = useAssets;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _Asset = require(\"./Asset\");\n\nfunction useAssets(moduleIds) {\n  var _useState = (0, _react.useState)(),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      assets = _useState2[0],\n      setAssets = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  (0, _react.useEffect)(function () {\n    _Asset.Asset.loadAsync(moduleIds).then(setAssets).catch(setError);\n  }, []);\n  return [assets, error];\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AAEA;;AAuBM,SAAUA,SAAV,CAAoBC,SAApB,EAAgD;EACpD,gBAA4B,sBAA5B;EAAA;EAAA,IAAOC,MAAP;EAAA,IAAeC,SAAf;;EACA,iBAA0B,sBAA1B;EAAA;EAAA,IAAOC,KAAP;EAAA,IAAcC,QAAd;;EAEA,sBAAU,YAAK;IACbC,aAAMC,SAAN,CAAgBN,SAAhB,EAA2BO,IAA3B,CAAgCL,SAAhC,EAA2CM,KAA3C,CAAiDJ,QAAjD;EACD,CAFD,EAEG,EAFH;EAIA,OAAO,CAACH,MAAD,EAASE,KAAT,CAAP;AACD","names":["useAssets","moduleIds","assets","setAssets","error","setError","Asset","loadAsync","then","catch"],"sources":["/Users/kevin/Desktop/group-1010001/front-mobile-gpe/node_modules/expo-asset/src/AssetHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { Asset } from './Asset';\n\n// @needsAudit\n/**\n * Downloads and stores one or more assets locally.\n * After the assets are loaded, this hook returns a list of asset instances.\n * If something went wrong when loading the assets, an error is returned.\n *\n * > Note, the assets are not \"reloaded\" when you dynamically change the asset list.\n *\n * @return Returns an array containing:\n * - on the first position, a list of all loaded assets. If they aren't loaded yet, this value is\n *   `undefined`.\n * - on the second position, an error which encountered when loading the assets. If there was no\n *   error, this value is `undefined`.\n *\n * @example\n * ```tsx\n * const [assets, error] = useAssets([require('path/to/asset.jpg'), require('path/to/other.png')]);\n *\n * return assets ? <Image source={assets[0]} /> : null;\n * ```\n */\nexport function useAssets(moduleIds: number | number[]): [Asset[] | undefined, Error | undefined] {\n  const [assets, setAssets] = useState<Asset[]>();\n  const [error, setError] = useState<Error>();\n\n  useEffect(() => {\n    Asset.loadAsync(moduleIds).then(setAssets).catch(setError);\n  }, []);\n\n  return [assets, error];\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}