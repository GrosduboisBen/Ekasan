{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NewCategorieDialog = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNativeDialog = _interopRequireDefault(require(\"react-native-dialog\"));\n\nvar _reduxHooks = require(\"../../hooks/reduxHooks\");\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/kevin/Desktop/group-1010001/front-mobile-gpe/components/components/Browser/NewCategorieDialog.tsx\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar NewCategorieDialog = function NewCategorieDialog(_ref) {\n  var visible = _ref.visible,\n      createCategorie = _ref.createCategorie,\n      setCategorieDialogVisible = _ref.setCategorieDialogVisible;\n\n  var _useAppSelector = (0, _reduxHooks.useAppSelector)(function (state) {\n    return state.theme.theme;\n  }),\n      colors = _useAppSelector.colors;\n\n  var _useState = (0, _react.useState)(''),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      categorieName = _useState2[0],\n      setCategorieName = _useState2[1];\n\n  var newCategorieInputRef = (0, _react.useRef)(null);\n  (0, _react.useEffect)(function () {\n    if (visible) {\n      setTimeout(function () {\n        var _newCategorieInputRef;\n\n        (_newCategorieInputRef = newCategorieInputRef.current) == null ? void 0 : _newCategorieInputRef.focus();\n      }, 100);\n    }\n  }, [visible]);\n  return (0, _jsxRuntime.jsxs)(_reactNativeDialog.default.Container, {\n    contentStyle: {\n      backgroundColor: colors.background2\n    },\n    visible: visible,\n    children: [(0, _jsxRuntime.jsx)(_reactNativeDialog.default.Title, {\n      style: {\n        color: colors.primary\n      },\n      children: \"Add a new Categorie\"\n    }), (0, _jsxRuntime.jsx)(_reactNativeDialog.default.Input, {\n      textInputRef: newCategorieInputRef,\n      style: {\n        color: colors.primary\n      },\n      onChangeText: function onChangeText(text) {\n        return setCategorieName(text);\n      }\n    }), (0, _jsxRuntime.jsx)(_reactNativeDialog.default.Button, {\n      label: \"Cancel\",\n      onPress: function onPress() {\n        return setCategorieDialogVisible(false);\n      }\n    }), (0, _jsxRuntime.jsx)(_reactNativeDialog.default.Button, {\n      label: \"OK\",\n      onPress: function onPress() {\n        createCategorie(categorieName);\n        setCategorieName('');\n      }\n    })]\n  });\n};\n\nexports.NewCategorieDialog = NewCategorieDialog;","map":{"version":3,"names":["NewCategorieDialog","visible","createCategorie","setCategorieDialogVisible","useAppSelector","state","theme","colors","useState","categorieName","setCategorieName","newCategorieInputRef","useRef","useEffect","setTimeout","current","focus","backgroundColor","background2","color","primary","text"],"sources":["/Users/kevin/Desktop/group-1010001/front-mobile-gpe/components/components/Browser/NewCategorieDialog.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport Dialog from 'react-native-dialog';\nimport { TextInput } from 'react-native-gesture-handler';\n\nimport { useAppSelector } from '../../hooks/reduxHooks';\n\ntype NewCategorieDialogProps = {\n  visible: boolean;\n  createCategorie: (name: string) => void;\n  setCategorieDialogVisible: (visible: boolean) => void;\n};\n\nexport const NewCategorieDialog = ({\n  visible,\n  createCategorie,\n  setCategorieDialogVisible,\n}: NewCategorieDialogProps) => {\n  const { colors } = useAppSelector((state) => state.theme.theme);\n  const [categorieName, setCategorieName] = useState('');\n  const newCategorieInputRef = useRef<TextInput>(null);\n  useEffect(() => {\n    if (visible) {\n      setTimeout(() => {\n        newCategorieInputRef.current?.focus();\n      }, 100);\n    }\n  }, [visible]);\n\n  return (\n    <Dialog.Container\n      contentStyle={{ backgroundColor: colors.background2 }}\n      visible={visible}\n    >\n      <Dialog.Title style={{ color: colors.primary }}>\n        Add a new Categorie\n      </Dialog.Title>\n      <Dialog.Input\n        textInputRef={newCategorieInputRef}\n        style={{ color: colors.primary }}\n        onChangeText={(text) => setCategorieName(text)}\n      ></Dialog.Input>\n      <Dialog.Button\n        label=\"Cancel\"\n        onPress={() => setCategorieDialogVisible(false)}\n      />\n      <Dialog.Button\n        label=\"OK\"\n        onPress={() => {\n          createCategorie(categorieName);\n          setCategorieName('');\n        }}\n      />\n    </Dialog.Container>\n  );\n};\n"],"mappings":";;;;;;;;;AAAA;;AAEA;;AAGA;;;;;;;;;;;AAQO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,OAIH;EAAA,IAH7BC,OAG6B,QAH7BA,OAG6B;EAAA,IAF7BC,eAE6B,QAF7BA,eAE6B;EAAA,IAD7BC,yBAC6B,QAD7BA,yBAC6B;;EAC7B,sBAAmB,IAAAC,0BAAA,EAAe,UAACC,KAAD;IAAA,OAAWA,KAAK,CAACC,KAAN,CAAYA,KAAvB;EAAA,CAAf,CAAnB;EAAA,IAAQC,MAAR,mBAAQA,MAAR;;EACA,gBAA0C,IAAAC,eAAA,EAAS,EAAT,CAA1C;EAAA;EAAA,IAAOC,aAAP;EAAA,IAAsBC,gBAAtB;;EACA,IAAMC,oBAAoB,GAAG,IAAAC,aAAA,EAAkB,IAAlB,CAA7B;EACA,IAAAC,gBAAA,EAAU,YAAM;IACd,IAAIZ,OAAJ,EAAa;MACXa,UAAU,CAAC,YAAM;QAAA;;QACf,yBAAAH,oBAAoB,CAACI,OAArB,2CAA8BC,KAA9B;MACD,CAFS,EAEP,GAFO,CAAV;IAGD;EACF,CAND,EAMG,CAACf,OAAD,CANH;EAQA,OACE,sBAAC,0BAAD,CAAQ,SAAR;IACE,YAAY,EAAE;MAAEgB,eAAe,EAAEV,MAAM,CAACW;IAA1B,CADhB;IAEE,OAAO,EAAEjB,OAFX;IAAA,WAIE,qBAAC,0BAAD,CAAQ,KAAR;MAAc,KAAK,EAAE;QAAEkB,KAAK,EAAEZ,MAAM,CAACa;MAAhB,CAArB;MAAA;IAAA,EAJF,EAOE,qBAAC,0BAAD,CAAQ,KAAR;MACE,YAAY,EAAET,oBADhB;MAEE,KAAK,EAAE;QAAEQ,KAAK,EAAEZ,MAAM,CAACa;MAAhB,CAFT;MAGE,YAAY,EAAE,sBAACC,IAAD;QAAA,OAAUX,gBAAgB,CAACW,IAAD,CAA1B;MAAA;IAHhB,EAPF,EAYE,qBAAC,0BAAD,CAAQ,MAAR;MACE,KAAK,EAAC,QADR;MAEE,OAAO,EAAE;QAAA,OAAMlB,yBAAyB,CAAC,KAAD,CAA/B;MAAA;IAFX,EAZF,EAgBE,qBAAC,0BAAD,CAAQ,MAAR;MACE,KAAK,EAAC,IADR;MAEE,OAAO,EAAE,mBAAM;QACbD,eAAe,CAACO,aAAD,CAAf;QACAC,gBAAgB,CAAC,EAAD,CAAhB;MACD;IALH,EAhBF;EAAA,EADF;AA0BD,CA1CM"},"metadata":{},"sourceType":"script","externalDependencies":[]}