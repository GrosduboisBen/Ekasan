services:
  pgdb:
    image: postgres
    restart: always
    volumes:
      - type: volume
        source: pgdb-data
        target: "/var/lib/postgresql/data"

    networks:
      - ekasan-network
    ports:
      - "0.0.0.0:5432:5432"
    environment:
      POSTGRES_PASSWORD: ekasan_secure_password
      POSTGRES_USER: ekasan_user
      POSTGRES_DB: ekasan_db_renew
  web:
    build:
      context: Ekasan-API/
    networks:
      - ekasan-network
    volumes:
      - ./:/app/
    ports:
      - "8090:8090"
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "scripts/web_healthcheck.sh"]
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 20s
    depends_on:
      pgdb:
        condition: service_started
    command: sh -c "python scripts/is_db_ready.py && scripts/create_auth.sh"

  ai_web:
    build:
      context: Ekasan-API/
    networks:
      - ekasan-network
    volumes:
      - ./:/app/
    ports:
      - "0.0.0.0:8000:8000"
    depends_on:
      web:
        condition: service_healthy
    command: sh -c "
        python Ekasan-API/ai_api/manage.py migrate &&
        python Ekasan-API/ai_api/manage.py runserver 0.0.0.0:8000"
  front_app:
    build:
      context: front-web
    networks:
      - ekasan-network
    volumes:
      - ./:/app/
      - node_modules:/app/node_modules
    ports:
      - "0.0.0.0:5173:5173"
    depends_on:
      web:
        condition: service_healthy
    command: sh -c "
      chmod +x scripts/* &&
      scripts/init_front_env.sh"
volumes:
  eksan-volume:
  pgdb-data: 
  node_modules:
networks:
  ekasan-network:
